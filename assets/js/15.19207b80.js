(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{507:function(e,l,i){"use strict";i.r(l);var r=i(6),o=Object(r.a)({},(function(){var e=this,l=e.$createElement,i=e._self._c||l;return i("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[i("p",[i("strong",[e._v("promise")])]),e._v(" "),i("ul",[i("li",[e._v("promise 是一种异步编程的解决方案，相比于传统的解决方案( 回调函数和事件 ) 更合理，更强大；es6 将其写进了语言标准，统一了用法，原生提供了promise对象；")]),e._v(" "),i("li",[i("strong",[e._v("特点：")])])]),e._v(" "),i("ol",[i("li",[e._v("对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态：pendding(进行中)、fuliued(已成功)、rejected(已失败)。只有异步操作的结果可以决定当前是哪一种状态，任何其他的操作都无法改变这个状态；")]),e._v(" "),i("li",[e._v("一旦状态改变，就不会再变，任何时候都能拿到这个结果")])]),e._v(" "),i("p",[i("strong",[e._v("promise API")])]),e._v(" "),i("ul",[i("li",[i("strong",[e._v("Promise.prototype.then()")]),e._v("\n此方法是定义在原型对象上的，此方法作用是为promise实例添加状态改变时的回调函数;")]),e._v(" "),i("li",[i("strong",[e._v("Promise.prototype.catch")]),e._v("\n次方法是Promise.then(null,reject) 的别名，用于指定错误发生时的回调函数；")]),e._v(" "),i("li",[i("strong",[e._v("Promise.prototype.finally")]),e._v("\n不管最后Promise状态如何都会执行的操作(es2018)")]),e._v(" "),i("li",[i("strong",[e._v("Promise.all()")]),e._v("\n将多个Promise包装成一个新的Promise实例\n"),i("ol",[i("li",[e._v("只用所有Promise 状态都变为fulilled，新的实例才会变成fulilled，此时返回值为数组形式")]),e._v(" "),i("li",[e._v("如果其中一个被rejected ,那么将会将第一个reject的实例的返回值传给回调函数")])])]),e._v(" "),i("li",[i("strong",[e._v("Promise.race()")]),e._v(" "),i("ol",[i("li",[e._v("如果不是promise对象，则会调用promise.resolve方法，将参数转换成promise实例 再进一步处理( promise.all 方法一样 )")]),e._v(" "),i("li",[e._v("只要包装的实例中有一个率先改变，p的状态就会跟着改变，率先改变的实例返回值就传递给 包装后的实例；")])])]),e._v(" "),i("li",[i("strong",[e._v("Promise.allSettled()")]),e._v("\n特点: 所有实例都返回结果后，不管是filfilled还是rejected，实例才会结束(es2020)")]),e._v(" "),i("li",[i("strong",[e._v("Promise.any()")]),e._v("\n特点: 所有实例状态变为rejected 包装后的实例才会变成rejected，只要有一个变为fulfilled，那么这个包装实例就会变成fulfilled；")]),e._v(" "),i("li",[i("strong",[e._v("Promise.resolve()")]),e._v(" "),i("ol",[i("li",[e._v("如果参数为promise对象时候，原样返回；")]),e._v(" "),i("li",[e._v("如果参数为带then方法的对象时候，会将这个对的转换成promise对象 立即执行then方法(带then方法的对象称为thenable对象 )")]),e._v(" "),i("li",[e._v("如果参数是不带thenable对象，则返回一个新的ptimise对象，状态为resolved；")]),e._v(" "),i("li",[e._v("不带参数时候，返回一个resolve状态的Promise对象；")])])])])])}),[],!1,null,null,null);l.default=o.exports}}]);